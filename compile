#!/bin/sh

set -eu

if [ ${#} -lt 3 ]; then
    echo "Usage: ${0} <source file> [--release/--debug] --player[#] --gc[GameController IP] [optional: extra compiler arguments...]"
    exit 1
elif [ ${#} -lt 4 ]; then
    echo "Usage: ${0} <source file> [--release/--debug] --player[#] --gc[GameController IP] [optional: extra compiler arguments...]"
    echo "(Note: your IP address is $(ifconfig | grep 'inet ' | grep -v 127.0.0.1 | cut -dt -f2- | cut -d\  -f2))"
    exit 1
fi

# make sure we're in .../robocup-upennalizers
if [ $(pwd | rev | cut -d '/' -f1) != "srezilannepu-pucobor" ]; then
    echo "Please run this script from the main project directory (.../robocup-upennalizers)"
    exit 1
fi

if [ ${2} = "--release" ]; then
    DEBUG=0
elif [ ${2} = "--debug" ]; then
    DEBUG=1
else
    echo "Unrecognized second argument"
    echo "Usage: ${0} <source file> [--release/--debug] --player[#] --gc[GameController IP] [optional: extra compiler arguments...]"
    exit 1
fi

if [ $(echo ${3} | cut -c1-8) = "--player" ]; then
    PLAYER=$(echo ${3} | cut -c9-)
else
    echo "Unrecognized third argument"
    echo "Usage: ${0} <source file> [--release/--debug] --player[#] --gc[GameController IP] [optional: extra compiler arguments...]"
    exit 1
fi

if [ $(echo ${4} | cut -c1-4) = "--gc" ]; then
    GAMECONTROLLER_IP=$(echo ${4} | cut -c5-)
else
    echo "Unrecognized fourth argument"
    echo "Usage: ${0} <source file> [--release/--debug] --player[#] --gc[GameController IP] [optional: extra compiler arguments...]"
    exit 1
fi

# Get latest submodule commits
echo "Updating submodules..."
git submodule update --init --recursive --remote > /dev/null 2>&1 || echo "  Couldn't; maybe no Internet? Proceeding..."

echo "Building IWYU..."
cd ext/iwyu
if [ ! -d build ]; then
    mkdir build
    cd build
    cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(llvm-config --libdir) ..
    ln -s $(llvm-config --libdir) ./lib
    make
else
    cd build
    make > /dev/null 2>&1 || make
fi
cd ../../.. # all the way back out

mkdir -p bin
EXECNAME=$(basename ${1} | cut -d. -f1)
MACROS="-DPLAYER=${PLAYER} -DGAMECONTROLLER_IP=${GAMECONTROLLER_IP} -DSYSTEM_BITS=32 -DLUA_32BITS"
COMMON="-std=gnu++2b -I ./include -include ./include/prologue.hpp -isystem ./ext/fixed-string/include -isystem ./ext/GameController/examples/c -isystem ./ext/lua -ffast-math -ftemplate-backtrace-limit=0"
WARNINGS="-Wall -Wextra -Weverything -Werror -pedantic-errors -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded -Wno-sign-conversion -Wno-exit-time-destructors -Wno-global-constructors"
DEBUG_FLAGS="-Os -fno-omit-frame-pointer -g3 -ffunction-sections -fdata-sections -ftrapv -fstack-check -fno-optimize-sibling-calls -fno-common" #-fsanitize=address -fsanitize-address-use-after-scope -fsanitize-address-use-after-return=always"
RELEASE_FLAGS="-O3 -fomit-frame-pointer -fno-exceptions -fshort-enums -march=native -mtune=native -mllvm -polly -mllvm -polly-vectorizer=stripmine -DFS_NOASSERT -DFS_DISABLE_IO"

echo "Including files at compile time..."
mkdir -p include/xxd
cd include/xxd
rm -rf *
cd .. # .../include
# ext/GameController/resources/config/spl/teams.cfg
echo '#ifndef XXD_GC_TEAM_CFG_HPP' > xxd/gc_team_cfg.hpp
echo '#define XXD_GC_TEAM_CFG_HPP' >> xxd/gc_team_cfg.hpp
echo '#pragma clang diagnostic push' >> xxd/gc_team_cfg.hpp
echo '#pragma clang diagnostic ignored "-Wreserved-identifier"' >> xxd/gc_team_cfg.hpp
echo '#define ___ext_GameController_resources_config_spl_teams_cfg constexpr inline static gc_team_cfg' >> xxd/gc_team_cfg.hpp # a dirty lil trick
echo '#define ___ext_GameController_resources_config_spl_teams_cfg_len constexpr inline static gc_team_cfg_len' >> xxd/gc_team_cfg.hpp
echo 'namespace xxd {' >> xxd/gc_team_cfg.hpp
xxd -i ../ext/GameController/resources/config/spl/teams.cfg >> xxd/gc_team_cfg.hpp
echo '} // namespace xxd' >> xxd/gc_team_cfg.hpp
echo '#undef ext_GameController_resources_config_spl_teams_cfg_len' >> xxd/gc_team_cfg.hpp
echo '#undef ext_GameController_resources_config_spl_teams_cfg' >> xxd/gc_team_cfg.hpp # undoing the low-down dirty rotten no-good trick
echo '#pragma clang diagnostic pop' >> xxd/gc_team_cfg.hpp
echo '#endif // XXD_GC_TEAM_CFG_HPP' >> xxd/gc_team_cfg.hpp
cd .. # back to where we were

echo "Running dependency graph analysis..."
SYSTEM_INCLUDES=$(clang++ -v -E -x c++ /dev/null 2>&1 | sed -n '/#include <...> search starts here:/,/End of search list./p' | sed '1d;$d' | sed 's/^ *//g' | sed 's/ *$//g' | sed 's/ / -isystem /g' | sed 's/^/-isystem /g')
for i in $(find ./include -name '*.*pp' ! -name 'prologue.hpp'); do
    echo ${i}
    set +e # don't immediately exit if the next command fails
    ext/iwyu/build/bin/include-what-you-use \
    -Xiwyu --comment_style=long \
    -Xiwyu --cxx17ns \
    -Xiwyu --error=1 \
    -Xiwyu --mapping_file=llvm.imp \
    -Xiwyu --max_line_length=999 \
    -Xiwyu --no_fwd_decls \
    -Xiwyu --prefix_header_includes=add \
    -Xiwyu --quoted_includes_first \
    -Xiwyu --update_comments \
    -Xiwyu --verbose=3 \
    ${SYSTEM_INCLUDES} \
    ${@:5} ${MACROS} -DDEBUG ${COMMON} ${i} 2>&1 | grep -v 'prologue.hpp' > /tmp/iwyu.out
    python ext/iwyu/fix_includes.py --blank_lines --comments --update_comments --nosafe_headers --reorder --separate_project_includes=$(pwd) < /tmp/iwyu.out > /dev/null
    # ${@:5} ${MACROS} ${COMMON} ${i} 2>&1 | grep -v 'prologue.hpp' | grep -v 'note: used here.')
    # ${@:5} ${MACROS} ${COMMON} ${i} 2>&1 | sed -n '/^$/q;p' | grep -v 'prologue.hpp' | grep -v 'note: used here.')
    set -e # now go back to exiting on failure
    IWYU_STDOUT=$(cat /tmp/iwyu.out | grep -v 'note: used here.' | sed -n '/^$/q;p')
    if [ ! -z "${IWYU_STDOUT}" ]; then echo "\033[0;31m${IWYU_STDOUT}\033[0m"; exit 1; fi
    # LAST_QUOTE_INCLUDE_LINE=$(grep -n '#include "' ${i} | tail -n 1 | cut -d: -f1)
    # FRST_ANGLE_INCLUDE_LINE=$(grep -n '#include <' ${i} | head -n 1 | cut -d: -f1)
    # if [ -n "${LAST_QUOTE_INCLUDE_LINE}" ] && [ -n "${FRST_ANGLE_INCLUDE_LINE}" ] && [ ${LAST_QUOTE_INCLUDE_LINE} -gt ${FRST_ANGLE_INCLUDE_LINE} ]; then
    #     echo "  ERROR: #include \"\"s after #include <>s (${i}:${LAST_QUOTE_INCLUDE_LINE} vs. ${i}:${FRST_ANGLE_INCLUDE_LINE})"
    #     exit 1
    # fi
done
# clang-tidy ${1} $(find include -name '*.*pp') --checks='-*,llvm-include-order' --fix --quiet --warnings-as-errors='-*' -- -DDEBUG -UNDEBUG ${@:5} ${MACROS} ${COMMON}

echo "Running static analysis..."
clang-tidy --verify-config > /dev/null 2>&1 || clang-tidy --verify-config
clang-tidy ${1} --quiet -- -DCLANG_TIDY -DDEBUG -UNDEBUG ${@:5} ${MACROS} ${COMMON} ${WARNINGS}

if [ ${DEBUG} -eq 1 ]; then
    FLAGS=${DEBUG_FLAGS}
    MACROS="${MACROS} -DDEBUG=1"
else
    FLAGS=${RELEASE_FLAGS}
    MACROS="${MACROS} -DDEBUG=0 -DNDEBUG=1"
fi

echo "Compiling..."
clang++ -o bin/robocup-${EXECNAME} ${1} ${@:5} ${MACROS} ${COMMON} ${WARNINGS} ${FLAGS}

# Kill processes on competing ports
echo "Competing IO processes running:"
lsof -t -i :3838 || echo "  None. Good to go!" # | xargs kill
